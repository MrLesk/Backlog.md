# .claude/claude.yaml
# Custom slash commands for the backlog.md workflow

commands:
  - name: /parse-prd
    description: "Parses a PRD document into a set of structured tasks, sub-tasks, and dependencies."
    prompt: |
      You are a senior software engineer responsible for project planning using the `backlog.md` CLI tool. Your task is to break down a Product Requirements Document (PRD) into a comprehensive set of actionable development tasks.

      1. **Read the PRD** located at: `{{.doc_path}}`.
      2. **Analyze the requirements** and formulate a list of atomic tasks required for implementation. For each task, define a clear title, a concise description, and 2-4 outcome-focused acceptance criteria.
      3. **Structure the work** by identifying parent-child relationships (sub-tasks) and dependencies between tasks.
      4. **Execute `backlog task create` commands** to create each task. Apply the following rules:
          *   Use the `--milestone {{.milestone_id}}` flag for all tasks.
          *   Use the `-p <parent_id>` flag for sub-tasks.
          *   Use the `--dep <dependency_id>` flag for tasks that depend on others.
          *   Apply relevant labels like `backend`, `frontend`, `database`, `api` using the `-l` flag.

      Start with foundational tasks (e.g., database schema) and proceed to dependent tasks (e.g., API endpoints, then UI components). After you have generated all the commands, present them to me for review before you would theoretically execute them.

  - name: /plan-task
    description: "Generates a detailed, step-by-step implementation plan for a specific task."
    prompt: |
      You are a senior software engineer. Your task is to create a detailed implementation plan for the following task.

      1.  First, read the task details using the command: `backlog task {{.task_id}} --plain`
      2.  Based on the description and acceptance criteria, formulate a step-by-step implementation plan. The plan should outline the technical approach, files to be modified, and the testing strategy.
      3.  Execute the `backlog task edit` command to add this plan to the task using the `--plan` flag. Present the final command to me.

  - name: /suggest-next-task
    description: "Analyzes the backlog and suggests the highest-priority, unblocked task to work on next."
    prompt: |
      You are my personal project manager. I need to decide which task to work on next.

      1.  First, get a prioritized list of all tasks that are in the "To Do" status by running: `backlog task list -s "To Do" --sort priority --plain`.
      2.  Analyze the output. For the highest-priority task, check if it has any dependencies listed. If it does, verify that all of its dependencies have a status of "Done".
      3.  Based on your analysis, recommend the single most important task I can start working on right now and explain why.

  - name: /daily-standup
    description: "Generates a progress report for the last 24 hours and lists current in-progress tasks."
    prompt: |
      Generate a progress report for today. List all tasks that were moved to "Done" in the last 24 hours by looking at the git log for commits related to task status changes. Then, list all tasks currently "In Progress" by running `backlog task list -s "In Progress" --plain`.

  - name: /capture-feature-request
    description: "Creates a new draft task for a feature request."
    prompt: |
      Capture the following feature request as a draft using the `backlog task create` command with the `--draft` flag.

      **Feature:** "{{.feature_description}}"
      **Rationale:** "{{.user_rationale}}"

      Include the user's rationale in the description field (`-d`).

  - name: /capture-bug-report
    description: "Creates a new task for a bug report."
    prompt: |
      A user has reported a bug. Create a new task for this bug report.

      **Bug Summary:** "{{.bug_summary}}"
      **Steps to Reproduce:** "{{.steps_to_reproduce}}"
      **Priority:** "{{.priority}}"
      **Labels:** "bug, {{.labels}}"

      Use the `backlog task create` command. Set the priority and labels accordingly. The description should contain the steps to reproduce.

  - name: /status-update
    description: "Provides a summary of all tasks currently in progress."
    prompt: |
      Provide a summary of all tasks that are currently "In Progress". For each task, list its ID, title, and assignee. Use the `backlog task list -s "In Progress" --plain` command.

  - name: /identify-refactoring
    description: "Analyzes completed tasks with a specific label to find refactoring opportunities."
    prompt: |
      Analyze all completed tasks with the `{{.label_name}}` label. Look for patterns in the implementation notes of these tasks that suggest technical debt or areas for refactoring. If you find any, create a new draft task titled "Refactor [Area]" and summarize your findings in the description.

  - name: /milestone-review
    description: "Generates a summary of all tasks in a milestone, grouped by label, for release notes."
    prompt: |
      The milestone `{{.milestone_id}}` is complete. Generate a summary of all tasks associated with this milestone. Group the tasks by their labels (e.g., `backend`, `frontend`, `bug`). This summary will be used for our release notes.

  - name: /onboard-developer
    description: "Generates an onboarding guide for a new developer, including key docs and good first tasks."
    prompt: |
      A new developer is joining the team. Provide them with an onboarding guide by performing the following steps:

      1.  List all documents in `backlog/docs/` by reading the directory.
      2.  List all decisions in `backlog/decisions/`.
      3.  Provide a list of 3-5 "good first tasks" from the backlog. These should be tasks that are in "To Do" status, have a "low" or "medium" priority, and have no dependencies. Use the `backlog task list` command to find them.