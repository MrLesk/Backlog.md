name: Release multi-platform executables

on:
  push:
    tags: ['v*.*.*']

permissions:
  contents: write
  id-token: write

jobs:
  build:
    name: build-${{ matrix.target }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: bun-linux-x64
          - os: ubuntu-latest
            target: bun-linux-arm64
          - os: macos-latest
            target: bun-darwin-x64
          - os: macos-latest
            target: bun-darwin-arm64
          - os: windows-latest
            target: bun-windows-x64
    runs-on: ${{ matrix.os }}
    env:
      BIN: backlog${{ contains(matrix.target,'windows') && '.exe' || '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v4
        id: cache
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-${{ matrix.target }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-bun-
      - run: bun install --frozen-lockfile
      - name: Sync version to tag
        shell: bash
        run: |
          TAG="${GITHUB_REF##refs/tags/v}"
          jq ".version = \"$TAG\"" package.json > tmp.json && mv tmp.json package.json
      - name: Compile standalone binary
        shell: bash
        run: |
          bun build src/cli.ts \
            --compile --minify --sourcemap \
            --target=${{ matrix.target }} \
            --define __EMBEDDED_VERSION__='"${GITHUB_REF##refs/tags/v}"' \
            --outfile=${{ env.BIN }}
      - name: Smoke-test binary (non-Windows)
        if: ${{ !contains(matrix.target,'windows') }}
        run: |
          chmod +x "${{ env.BIN }}"
          "./${{ env.BIN }}" --version
      - name: Package artifact
        shell: bash
        run: |
          mkdir pkg
          mv "${{ env.BIN }}" pkg/
          tar -czf backlog-${{ matrix.target }}.tar.gz -C pkg .
          zip -r backlog-${{ matrix.target }}.zip pkg
      - uses: actions/upload-artifact@v4
        with:
          name: backlog-${{ matrix.target }}
          path: |
            backlog-${{ matrix.target }}.tar.gz
            backlog-${{ matrix.target }}.zip

  npm-publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: dist/bin
      - name: Prepare wrapper & dist dir
        shell: bash
        run: |
          mkdir -p dist
          cp scripts/cli.js dist/cli.js
          chmod +x dist/cli.js
      - name: Create npm-ready package.json
        shell: bash
        run: |
          TAG="${GITHUB_REF##refs/tags/v}"
          jq 'del(.devDependencies,.scripts.prepare,.scripts.preinstall,.scripts.postinstall) |
              .version = "'$TAG'" |
              .bin = {backlog:"cli.js"} |
              .files = ["bin/","cli.js"]'               package.json > dist/package.json
          cp LICENSE README.md dist/ 2>/dev/null || true
          find dist/bin -type f -name "backlog*" -exec chmod +x {} +
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
      - name: Publish to npm
        run: |
          cd dist
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

  github-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release-assets
      - uses: softprops/action-gh-release@v1
        with:
          files: release-assets/**/*
