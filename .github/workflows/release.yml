name: Release multi-platform executables

on:
  push:
    tags: ['v*.*.*']

permissions:
  contents: write
  id-token: write

jobs:
  build:
    name: build-${{ matrix.target }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: bun-linux-x64
          - os: ubuntu-latest
            target: bun-linux-arm64
          - os: macos-latest
            target: bun-darwin-x64
          - os: macos-latest
            target: bun-darwin-arm64
          - os: windows-latest
            target: bun-windows-x64
    runs-on: ${{ matrix.os }}
    env:
      BIN: backlog${{ contains(matrix.target,'windows') && '.exe' || '' }}
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
      - uses: actions/cache@v4
        id: cache
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-${{ matrix.target }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-bun-
      - run: bun install --frozen-lockfile
      - name: Sync version to tag
        shell: bash
        run: |
          TAG="${GITHUB_REF##refs/tags/v}"
          jq ".version = \"$TAG\"" package.json > tmp.json && mv tmp.json package.json
      - name: Compile standalone binary
        shell: bash
        run: |
          bun build src/cli.ts \
            --compile --minify --sourcemap \
            --target=${{ matrix.target }} \
            --define __EMBEDDED_VERSION__="\"${GITHUB_REF##refs/tags/v}\"" \
            --outfile=${{ env.BIN }}
      - name: Make binary executable (non-Windows)
        if: ${{ !contains(matrix.target,'windows') }}
        run: chmod +x "${{ env.BIN }}"
      - uses: actions/upload-artifact@v4
        with:
          name: backlog-${{ matrix.target }}
          path: ${{ env.BIN }}

  npm-publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare npm package
        shell: bash
        run: |
          mkdir -p dist
          cp scripts/cli.cjs dist/cli.js
          chmod +x dist/cli.js
      - name: Create npm-ready package.json
        shell: bash
        run: |
          TAG="${GITHUB_REF##refs/tags/v}"
          jq 'del(.devDependencies,.scripts.prepare,.scripts.preinstall,.scripts.postinstall,.type) |
              .version = "'$TAG'" |
              .bin = {backlog:"cli.js"} |
              .files = ["cli.js","package.json","README.md","LICENSE"]' package.json > dist/package.json
          cp LICENSE README.md dist/ 2>/dev/null || true
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
      - name: Publish to npm
        run: |
          cd dist
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

  publish-binaries:
    needs: [build, npm-publish]
    strategy:
      matrix:
        include:
          - target: bun-linux-x64
            package: backlog.md-linux-x64
            os: linux
            cpu: x64
          - target: bun-linux-arm64
            package: backlog.md-linux-arm64
            os: linux
            cpu: arm64
          - target: bun-darwin-x64
            package: backlog.md-darwin-x64
            os: darwin
            cpu: x64
          - target: bun-darwin-arm64
            package: backlog.md-darwin-arm64
            os: darwin
            cpu: arm64
          - target: bun-windows-x64
            package: backlog.md-windows-x64
            os: win32
            cpu: x64
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: backlog-${{ matrix.target }}
      - name: Prepare package
        shell: bash
        run: |
          TAG="${GITHUB_REF##refs/tags/v}"
          mkdir -p pkg
          mv backlog* pkg/
          cp LICENSE README.md pkg/ 2>/dev/null || true
          cat <<EOF > pkg/package.json
          {
            "name": "${{ matrix.package }}",
            "version": "${TAG}",
            "os": ["${{ matrix.os }}"],
            "cpu": ["${{ matrix.cpu }}"],
            "bin": {"backlog": "backlog${{ contains(matrix.target,'windows') && '.exe' || '' }}"},
            "files": ["backlog${{ contains(matrix.target,'windows') && '.exe' || '' }}","package.json","LICENSE"]
          }
          EOF
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org
      - name: Publish platform package
        run: |
          cd pkg
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

  github-release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: release-assets
      - name: Rename binaries for release
        run: |
          mkdir -p binaries
          # Move and rename binaries from artifacts
          for dir in release-assets/*/; do
            if [ -d "$dir" ]; then
              # Extract target name from directory
              target=$(basename "$dir" | sed 's/backlog-//')
              # Find the binary file (backlog or backlog.exe)
              binary=$(find "$dir" -name "backlog*" -type f)
              if [ -n "$binary" ]; then
                # Preserve .exe extension for Windows binaries
                if [[ "$target" == *"windows"* ]] && [[ "$binary" == *".exe" ]]; then
                  cp "$binary" "binaries/backlog-${target}.exe"
                else
                  cp "$binary" "binaries/backlog-${target}"
                fi
              fi
            fi
          done
          ls -la binaries/
      - uses: softprops/action-gh-release@v1
        with:
          files: binaries/*
